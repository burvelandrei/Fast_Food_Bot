from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, Dialog, Window, StartMode
from aiogram_dialog.widgets.text import Const, Format, List, Case
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram_dialog.widgets.kbd import (
    SwitchTo,
    Button,
    Start,
)
from dialogs.states import CheckoutOrderSG, MenuSG
from services.api_client import APIClient, APIError
from db.operations import UserDO


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def select_delivery_type_button(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    delivery_type = widget.widget_id
    dialog_manager.dialog_data["delivery_type"] = delivery_type
    dialog_manager.dialog_data["delivery_address"] = None
    if delivery_type == "pickup":
        await dialog_manager.switch_to(state=CheckoutOrderSG.confirmation)
    elif delivery_type == "courier":
        await dialog_manager.switch_to(state=CheckoutOrderSG.input_delivery_address)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å—Å–∞
async def correct_delivery_address(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    dialog_manager.dialog_data["delivery_address"] = text
    await dialog_manager.switch_to(state=CheckoutOrderSG.confirmation)


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def confirmation_order_button(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    delivery_type = dialog_manager.dialog_data["delivery_type"]
    delivery_address = dialog_manager.dialog_data["delivery_address"]
    data = {
        "delivery_type": delivery_type,
        "delivery_address": delivery_address,
    }
    try:
        async with APIClient(user.email) as api:
            await api.post("/orders/confirmation/", data=data)
            await dialog_manager.switch_to(state=CheckoutOrderSG.success_checkout)
    except APIError:
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}")


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
async def confirmation_order_getter(dialog_manager: DialogManager, **kwargs):
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    delivery_type = dialog_manager.dialog_data["delivery_type"]
    delivery_address = dialog_manager.dialog_data["delivery_address"]
    try:
        async with APIClient(user.email) as api:
            order = await api.get(f"/carts/")
            return {
                "cart_items": order["cart_items"],
                "total_amount": order["total_amount"],
                "delivery_type": delivery_type,
                "delivery_address": delivery_address,
                "error_message": None,
            }
    except APIError:
        return {
            "cart_items": [],
            "total_amount": 0,
            "delivery_type": "-",
            "delivery_address": "-",
            "error_message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        }


# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
select_delivery_type = Window(
    Const("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:"),
    Button(
        text=Const("üö∂–°–∞–º–æ–≤—ã–≤–æ–∑"),
        id="pickup",
        on_click=select_delivery_type_button,
    ),
    Button(
        text=Const("üöö –î–æ—Å—Ç–∞–≤–∫–∞"),
        id="courier",
        on_click=select_delivery_type_button,
    ),
    Start(
        text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"),
        id="back_to_menu",
        state=MenuSG.menu,
        mode=StartMode.RESET_STACK,
    ),
    state=CheckoutOrderSG.select_delivery_type,
)


# –û–∫–Ω–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
input_delivery_type = Window(
    Const("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"),
    TextInput(
        id="delivery_address_input",
        on_success=correct_delivery_address,
    ),
    SwitchTo(
        text=Const("üîô –ù–∞–∑–∞–¥"),
        id="back_to_select_delivery_type",
        state=CheckoutOrderSG.select_delivery_type,
    ),
    Start(
        text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"),
        id="back_to_menu",
        state=MenuSG.menu,
        mode=StartMode.RESET_STACK,
    ),
    state=CheckoutOrderSG.input_delivery_address,
)


# –û–∫–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
confirmation_order_window = Window(
    Format("üìú –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:"),
    Format("{error_message}", when="error_message"),
    List(
        Format(
            """
            - {item[product][name]} {item[product][size_name]} x {item[quantity]} —à—Ç. |  {item[total_price]} —Ä—É–±."""
        ),
        items="cart_items",
    ),
    Format("\nüí∞  –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.\n"),
    Case(
        {
            "pickup": Const("–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: üö∂ –°–∞–º–æ–≤—ã–≤–æ–∑"),
            "courier": Const("–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º"),
        },
        selector=lambda data, *_: data["delivery_type"],
    ),
    Format(
        "–ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}",
        when="delivery_address",
    ),
    Button(
        Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"),
        id="confirmation_order",
        on_click=confirmation_order_button,
    ),
    SwitchTo(
        text=Const("üîô –ü–æ–º–µ–Ω—è—Ç—å –∞–¥—Ä–µ—Å—Å"),
        id="back_to_input_delivery_address",
        when="delivery_address",
        state=CheckoutOrderSG.input_delivery_address,
    ),
    Start(
        text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"),
        id="back_to_menu",
        state=MenuSG.menu,
        mode=StartMode.RESET_STACK,
    ),
    getter=confirmation_order_getter,
    state=CheckoutOrderSG.confirmation,
)


# –û–∫–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
success_checkout = Window(
    Const("üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω"),
    Start(
        text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"),
        id="back_to_menu",
        state=MenuSG.menu,
        mode=StartMode.RESET_STACK,
    ),
    state=CheckoutOrderSG.success_checkout,
)

dialog = Dialog(
    select_delivery_type,
    input_delivery_type,
    confirmation_order_window,
    success_checkout,
)
