from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, Dialog, Window
from aiogram_dialog.widgets.text import Const, Format, Case, Multi
from aiogram_dialog.widgets.kbd import (
    Button,
    Select,
    Cancel,
    ScrollingGroup,
    Group,
)
from aiogram_dialog.widgets.media import StaticMedia
from environs import Env
from dialogs.states import CartsSG
from services.api_client import APIClient
from db.operations import UserDO


env = Env()
env.read_env()


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
async def clear_cart(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    async with APIClient(user.email) as api:
        await api.delete("/carts/")
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    dialog_manager.dialog_data.clear()
    await dialog_manager.update({})


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def confirmation_order(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    async with APIClient(user.email) as api:
        result = await api.post("/orders/confirmation/")
        if result:
            await callback.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω")


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def cart_item_button(
    callback: CallbackQuery,
    widget: Select,
    dialog_manager: DialogManager,
    item_id: int,
):
    dialog_manager.dialog_data["product_id"] = item_id
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏ –∫—ç—à–∏—Ä—É–µ–º
    if "cart_item_data" not in dialog_manager.dialog_data:
        tg_id = str(dialog_manager.event.from_user.id)
        session = dialog_manager.middleware_data["session"]
        user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
        async with APIClient(user.email) as api:
            cart_item = await api.get(f"/carts/{item_id}/")
            dialog_manager.dialog_data["cart_item_data"] = cart_item
            dialog_manager.dialog_data["quantity"] = cart_item["quantity"]
            dialog_manager.dialog_data["total_price"] = float(cart_item["total_price"])
            dialog_manager.dialog_data["price_product"] = float(
                cart_item["product"]["final_price"]
            )
    await dialog_manager.switch_to(state=CartsSG.cart_item)


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ —É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def increase_quantity(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    current_quantity = dialog_manager.dialog_data.get("quantity")
    price_product = dialog_manager.dialog_data.get("price_product")
    dialog_manager.dialog_data["quantity"] = current_quantity + 1
    dialog_manager.dialog_data["total_price"] = price_product * (current_quantity + 1)
    await dialog_manager.update({})


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async def decrease_quantity(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    current_quantity = dialog_manager.dialog_data.get("quantity")
    price_product = dialog_manager.dialog_data.get("price_product")
    # —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 1
    new_quantity = max(1, current_quantity - 1)
    dialog_manager.dialog_data["quantity"] = new_quantity
    dialog_manager.dialog_data["total_price"] = price_product * new_quantity
    await dialog_manager.update({})


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def update_quantity(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    product_id = int(dialog_manager.dialog_data["product_id"])
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    quantity = dialog_manager.dialog_data.get("quantity")
    data = {"product_id": product_id, "quantity": quantity}
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async with APIClient(user.email) as api:
        await api.post("/carts/update/", data=data)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    async with APIClient(user.email) as api:
        cart_item = await api.get(f"/carts/{product_id}/")
        dialog_manager.dialog_data["cart_item_data"] = cart_item
    await dialog_manager.update({})


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def delete_cart_item(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    product_id = int(dialog_manager.dialog_data["product_id"])
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    async with APIClient(user.email) as api:
        await api.delete(f"/carts/{product_id}/")
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
    if "cart_item_data" in dialog_manager.dialog_data:
        del dialog_manager.dialog_data["cart_item_data"]
    if "quantity" in dialog_manager.dialog_data:
        del dialog_manager.dialog_data["quantity"]
    if "total_price" in dialog_manager.dialog_data:
        del dialog_manager.dialog_data["total_price"]
    await dialog_manager.switch_to(state=CartsSG.carts)


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def back_to_cart(
    callback: CallbackQuery, widget: Button, dialog_manager: DialogManager
):
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    if "cart_item_data" in dialog_manager.dialog_data:
        del dialog_manager.dialog_data["cart_item_data"]
    if "quantity" in dialog_manager.dialog_data:
        del dialog_manager.dialog_data["quantity"]
    if "total_price" in dialog_manager.dialog_data:
        del dialog_manager.dialog_data["total_price"]
    await dialog_manager.switch_to(state=CartsSG.carts)


# –ì–µ—Ç–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–∫–Ω–æ
async def carts_getter(dialog_manager: DialogManager, **kwargs):
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    async with APIClient(user.email) as api:
        carts = await api.get("/carts/")
        return {
            "total_amount": carts["total_amount"],
            "cart_items": carts["cart_items"],
        }


# –ì–µ—Ç–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–∫–Ω–æ
async def cart_item_getter(dialog_manager: DialogManager, **kwargs):
    cart_item_data = dialog_manager.dialog_data.get("cart_item_data")
    quantity = dialog_manager.dialog_data.get("quantity")
    total_price = dialog_manager.dialog_data.get("total_price")
    check_image = cart_item_data["product"]["photo_url"]
    photo_s3_url = None
    if check_image:
        photo_s3_url = f"{env('S3_HOST')}{env('S3_BACKET')}{cart_item_data['product']['photo_url']}"
    return {
        "name": cart_item_data["product"]["name"],
        "total_price": f"{total_price:.2f}",
        "quantity": quantity,
        "photo_s3_url": photo_s3_url,
        "check_image": check_image,
    }


# –û–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã
carts_window = Window(
    # –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Ç–æ —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    Case(
        {
            "True": Format("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ üòî"),
            "False": Multi(
                Format("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"),
                Format("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã: {total_amount} —Ä—É–±."),
                Format("üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:"),
            ),
        },
        selector=lambda data, *_: str(not bool(data["cart_items"])),
    ),
    # –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –±–æ–ª—å—à–µ 5, –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    ScrollingGroup(
        Select(
            Format("{item[product][name]} - {item[quantity]}"),
            id="cart_button",
            item_id_getter=lambda x: x["product"]["id"],
            items="cart_items",
            on_click=cart_item_button,
        ),
        id="carts_scroll",
        width=1,
        height=5,
        when=lambda data, *_: len(data["cart_items"]) > 5,
    ),
    # –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5, –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å —Å–ø–∏—Å–∫–æ–º
    Group(
        Select(
            Format("{item[product][name]} - {item[quantity]}"),
            id="cart_button",
            item_id_getter=lambda x: x["product"]["id"],
            items="cart_items",
            on_click=cart_item_button,
        ),
        width=1,
        when=lambda data, *_: len(data["cart_items"]) <= 5,
    ),
    # –∫–Ω–æ–ø–∫–∏ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤—ã–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    Button(
        Const("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"),
        id="clear_cart",
        on_click=clear_cart,
        when="cart_items",
    ),
    Button(
        Const("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
        id="checkout",
        on_click=confirmation_order,
        when="cart_items",
    ),
    Cancel(
        text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"),
        id="__main__",
    ),
    getter=carts_getter,
    state=CartsSG.carts,
)


cart_item_window = Window(
    StaticMedia(url=Format("{photo_s3_url}"), when="check_image"),
    Format("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}"),
    Format("–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price}"),
    Group(
        Button(
            Const("‚ûñ"),
            id="decrease_quantity",
            on_click=decrease_quantity,
        ),
        Button(Format("{quantity}"), id="current_quantity"),
        Button(
            Const("‚ûï"),
            id="increase_quantity",
            on_click=increase_quantity,
        ),
        width=3,
    ),
    Button(
        Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
        id="update_quantity",
        on_click=update_quantity,
    ),
    Button(
        Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"),
        id="delete_cart_item",
        on_click=delete_cart_item,
    ),
    Button(
        Const("üîô –ù–∞–∑–∞–¥"),
        id="back_to_cart",
        on_click=back_to_cart,
    ),
    Cancel(text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"), id="__main__"),
    getter=cart_item_getter,
    state=CartsSG.cart_item,
)


dialog = Dialog(carts_window, cart_item_window)
