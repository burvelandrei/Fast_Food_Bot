from datetime import datetime
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, Dialog, Window
from aiogram_dialog.widgets.text import Const, Format, Case, List
from aiogram_dialog.widgets.kbd import (
    SwitchTo,
    Select,
    Cancel,
    ScrollingGroup,
    Group,
)
from dialogs.states import OrdersSG
from services.api_client import APIClient
from db.operations import UserDO


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã —Ñ–æ—Ä–º–∞—Ç
def formatted_date(utc_date: str):
    dt = datetime.strptime(utc_date, "%Y-%m-%dT%H:%M:%S.%f")
    formatted_date = dt.strftime("%d.%m.%Y")
    return formatted_date


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–æ—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
async def order_button(
    callback: CallbackQuery,
    widget: Select,
    dialog_manager: DialogManager,
    item_id: int,
):
    dialog_manager.dialog_data["order_id"] = item_id
    await dialog_manager.switch_to(state=OrdersSG.order_detail)


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–∫–Ω–æ
async def history_orders_getter(dialog_manager: DialogManager, **kwargs):
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    async with APIClient(user.email) as api:
        response = await api.get("/orders/")
        if response["success"]:
            orders = response["data"]
            for order in orders:
                created_at = order.get("created_at")
                order["created_at"] = formatted_date(created_at)
        else:
            orders = None
        error_message = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞." if not orders else None
        return {"orders": orders, "error_message": error_message}


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ id –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–∫–Ω–æ
async def order_detail_getter(dialog_manager: DialogManager, **kwargs):
    order_id = dialog_manager.dialog_data["order_id"]
    tg_id = str(dialog_manager.event.from_user.id)
    session = dialog_manager.middleware_data["session"]
    user = await UserDO.get_by_tg_id(tg_id=tg_id, session=session)
    async with APIClient(user.email) as api:
        response = await api.get(f"/orders/{order_id}/")
        if response["success"]:
            order = response["data"]
            return {
                "id": order["id"],
                "order_items": order["order_items"],
                "created_at": formatted_date(order["created_at"]),
                "total_amount": order["total_amount"],
            }
        else:
            return {
                "id": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "order_items": [],
                "created_at": "-",
                "total_amount": 0,
            }


# –û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–∞–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
history_orders_window = Window(
    # –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–≤–æ–¥–∏–º —Ç–æ —á—Ç–æ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
    Case(
        {
            "True": Format("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ üòî"),
            "False": Format("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"),
        },
        selector=lambda data, *_: str(not bool(data["orders"])),
        when=lambda data, *_: data["orders"] is not None,
    ),
    Format("{error_message}", when="error_message"),
    # –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ 5 –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    ScrollingGroup(
        Select(
            Format("üì¶ –ó–∞–∫–∞–∑ ‚Ññ{item[id]} –æ—Ç {item[created_at]}"),
            id="order_button",
            item_id_getter=lambda x: x["id"],
            items="orders",
            on_click=order_button,
        ),
        id="orders_scroll",
        width=1,
        height=5,
        when=lambda data, *_: data["orders"] and len(data["orders"]) > 5,
    ),
    # –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ 5 –≤—ã–≤–æ–¥–∏–º –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    Group(
        Select(
            Format("üì¶ –ó–∞–∫–∞–∑ ‚Ññ{item[id]} –æ—Ç {item[created_at]}"),
            id="order_button",
            item_id_getter=lambda x: x["id"],
            items="orders",
            on_click=order_button,
        ),
        width=1,
        when=lambda data, *_: data["orders"] and len(data["orders"]) <= 5,
    ),
    Cancel(text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"), id="__main__"),
    getter=history_orders_getter,
    state=OrdersSG.orders,
)


# –û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
order_detail_window = Window(
    Format("üì¶ –ó–∞–∫–∞–∑ ‚Ññ{id}"),
    Format("üìÖ –î–∞—Ç–∞: {created_at}\n"),
    Format("üìú –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:"),
    List(
        Format("- {item[name]} x {item[quantity]} —à—Ç. |  {item[total_price]} —Ä—É–±."),
        items="order_items",
    ),
    Format("\nüí∞  –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±."),
    SwitchTo(
        text=Const("üîô –ù–∞–∑–∞–¥"),
        id="back_to_history_orders",
        state=OrdersSG.orders,
    ),
    Cancel(text=Const("üîô –ù–∞–∑–∞–¥ –≤ –ú–µ–Ω—é!"), id="__main__"),
    getter=order_detail_getter,
    state=OrdersSG.order_detail,
)


dialog = Dialog(history_orders_window, order_detail_window)
